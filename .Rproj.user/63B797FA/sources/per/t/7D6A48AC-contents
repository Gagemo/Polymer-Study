################################################################################
################################################################################
#########################      Polymer Study      ##############################
##################   Greenhouse - Lovegrass - Weight Data ######################
#########################  University of Florida  ##############################
#########################     Gage LaPierre       ##############################
#########################      2022 - 2025        ##############################
################################################################################
################################################################################

######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014") 

#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in% 
                                     installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

# Load required libraries
library(tidyverse)
library(car)
library(gridExtra)

# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass Weight.csv")

# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)

# Summary statistics
summary_stats <- data %>%
  group_by(Treatment) %>%
  summarise(across(c(Total.Weight, Root.Weight, Shoot.Weight,Lost.Weight, 
                     Lost.Weight.., Root.., Shoot..), 
                   list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)

# Check for normality
shapiro_results <- list(
  Total.Weight = shapiro.test(data$Total.Weight)$p.value,
  Root.Weight = shapiro.test(data$Root.Weight)$p.value,
  Lost.Weight = shapiro.test(na.omit(data$Lost.Weight))$p.value,
  Lost.Weight.. = shapiro.test(data$Lost.Weight..)$p.value,
  Root.. = shapiro.test(data$Root..)$p.value,
  Shoot.. = shapiro.test(data$Shoot..)$p.value
)
print(shapiro_results)

# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
  if (shapiro_results[[metric]] > 0.05) {
    model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
    anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
    test_type[[metric]] <- "ANOVA"
  } else {
    model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
    anova_results[[metric]] <- model$p.value
    test_type[[metric]] <- "Kruskal-Wallis"
  }
}
print(anova_results)

# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
  plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
    geom_boxplot() +
    scale_fill_manual(values = c("lightblue", "#FFA07A")) +
    theme_classic() +
    labs(x = NULL, y = y_label) +
    theme(legend.position = "none") +
    coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
    annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1, 
             label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
  
  # Save plot
  ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
  
  return(plot)
}

# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
  create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})

# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))

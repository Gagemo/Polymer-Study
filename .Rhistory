# We only care about heights of living plants, as 'Dead' entries are NA.
data_height <- data %>%
filter(!is.na(Height)) %>% # Exclude rows where Height is NA (dead plants)
filter(Year != "0") # Exclude baseline Year "0" if analysis focuses on growth AFTER planting
print("\n--- Growth Height Analysis ---")
# 1. Descriptive Statistics for Height
height_summary <- data_height %>%
group_by(Species, Polymer, Year, Site) %>%
summarise(
Mean_Height = mean(Height, na.rm = TRUE),
SD_Height = sd(Height, na.rm = TRUE),
N_Plants = n(),
.groups = "drop"
)
print("\nMean and Standard Deviation of Plant Heights:")
print(height_summary)
# Ensure that the combination of Site and Plot uniquely identifies a plot
data_height$Plot_ID <- interaction(data_height$Site, data_height$Plot, drop = TRUE)
# Let's consider a simpler lmer model first, which is more flexible with random effects.
# If 'ID' column exists for individual plants: lmer(Height ~ Polymer * Species * Year + (1|ID) + (1|Site/Plot), data = data_height)
# If 'ID' is not available, and we assume each row is a separate plant observation at a given year,
# and we want to account for site and plot variability:
tryCatch({
model_height_lmer <- lmer(Height ~ Polymer * Species * Year + (1|Site) + (1|Plot_ID),
data = data_height, REML = TRUE) # REML=TRUE for better variance estimates
print("\nLinear Mixed-Effects Model Summary for Height:")
print(summary(model_height_lmer))
# Perform ANOVA-like tests on the mixed model to get p-values for fixed effects
print("\nANOVA Table for Fixed Effects (Height Model):")
print(anova(model_height_lmer))
# Post-hoc tests for significant interactions or main effects
# Example: If Polymer:Species:Year interaction is significant
# You might want to compare Polymer effects within each Species and Year combination.
# Or compare Year effects for each Polymer and Species.
# Let's check for the interaction effects and then perform post-hoc tests
# Example post-hoc: Compare Polymer effect for each Species at each Year
print("\nPost-hoc tests (example: Polymer effect within Species and Year):")
emmeans_interaction <- emmeans(model_height_lmer, ~ Polymer | Species * Year)
print(pairs(emmeans_interaction, adjust = "bonferroni")) # Bonferroni correction for multiple comparisons
# Example post-hoc: Compare Year effect for each Species and Polymer
print("\nPost-hoc tests (example: Year effect within Species and Polymer):")
emmeans_year <- emmeans(model_height_lmer, ~ Year | Species * Polymer)
print(pairs(emmeans_year, adjust = "bonferroni"))
}, error = function(e) {
message("Could not fit mixed-effects model. This often happens if there's insufficient variance within random effects groups or if 'Plot_ID' is not granular enough. Error: ", e$message)
message("Consider simplifying the random effects, or ensure 'Site' and 'Plot' have enough unique combinations with multiple observations per combination.")
})
# 3. Visualization of Growth Heights
# Plot mean height over years, faceted by site
ggplot(height_summary, aes(x = Year, y = Mean_Height, color = Polymer, linetype = Species, group = interaction(Polymer, Species))) + # Corrected grouping for geom_line
geom_line(linewidth = 1) + # Linetype is already mapped in the main aes
geom_point(aes(shape = Species), size = 3) + # Add points for each data point
scale_color_manual(values = c("No" = "darkgreen", "Yes" = "darkorange")) + # Adjusted to "No" and "Yes" for Polymer factor levels
theme_minimal() +
labs(
x = "Year",
y = "Mean Height (cm)",
title = "Mean Plant Height Over Time by Polymer, Species, and Site",
color = "Polymer Treatment",
linetype = "Species",
shape = "Species"
) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~ Site, scales = "free_y") # Facet by Site, allowing free y-scales if heights vary a lot between sites
# Boxplot to visualize distribution of heights at each measurement point
ggplot(data_height, aes(x = Year, y = Height, fill = Polymer)) +
geom_boxplot(position = position_dodge(0.8)) +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "#FFA07A")) + # Adjusted to "No" and "Yes"
facet_grid(Species ~ Site, scales = "free_y") + # Grid by Species and Site
theme_classic() +
labs(
x = "Year",
y = "Height (cm)",
title = "Distribution of Plant Heights by Species, Polymer, Year, and Site"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print("\nAnalysis complete. Check the generated plots for visual insights.")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra", "rstatix")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(rstatix)
# Load the dataset
data <- read.csv("Data/Polymer Study - Field Data.csv")
# Convert categorical variables
data$Species <- as.factor(data$Species)
data$Polymer <- as.factor(data$Polymer)
data$Year <- as.factor(data$Year)
# Replace 'Dead' with NA in 'Height' and create a 'Dead' indicator
data$Dead <- ifelse(data$Height == "Dead", 1, 0)
data$Height[data$Height == "Dead"] <- NA
data$Height <- as.numeric(data$Height)
# Calculate proportion of dead plants, excluding "0" Year
dead_proportion <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year) %>%
summarise(
Total_Plants = n(),
Dead_Plants = sum(Dead, na.rm = TRUE),
Proportion_Dead = Dead_Plants / Total_Plants,
.groups = "drop"
)
print("Proportion of Dead Plants:")
print(dead_proportion)
# Filter out rows where all plants are dead or alive for logistic regression, exclude 0 month
data_filtered <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year) %>%
filter(n_distinct(Dead) > 1) %>%
ungroup()
# Logistic Regression
logistic_results <- data_filtered %>%
group_by(Species, Polymer) %>%
do(model = glm(Dead ~ Year, family = binomial, data = .)) %>%
summarise(
Species = first(Species),
Polymer = first(Polymer),
tidy(model),
.groups = "drop"
) %>%
filter(term != "(Intercept)") %>%
mutate(
Sig = ifelse(p.value < 0.05, "*", ""),
Odds_Ratio = exp(estimate)
)
print("\nLogistic Regression Results:")
print(logistic_results)
# Combine data for plotting
plot_data <- dead_proportion %>%
left_join(logistic_results, by = c("Species" = "Species", "Polymer" = "Polymer"))
# Create the plot
ggplot(plot_data, aes(x = interaction(Year, Species), y = Proportion_Dead,
fill = Polymer)) + # changed x axis and fill
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("lightblue", "#FFA07A")) + # colors by polymer
theme_classic() +
labs(
x = "Year - Species", # changed x axis label
y = "Proportion Dead"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 1) +
geom_text(
aes(label = Sig, y = Proportion_Dead + 0.05),
position = position_dodge(width = 0.9),
vjust = 0
)
# Load necessary libraries
library(tidyverse)
library(rstatix) # For easy summary statistics and ANOVA/post-hoc tests
library(lme4)    # For fitting linear mixed-effects models
library(lmerTest) # For p-values in lme4 models and for anova() function
library(afex)    # For aov_ez, which is useful for mixed ANOVA designs
library(emmeans) # For post-hoc comparisons
# Load the dataset using content_fetcher (assuming it's accessible as 'Polymer Study - Field Data.csv')
# In a real R environment, you'd use read.csv("Polymer Study - Field Data.csv")
# For this environment, we simulate loading the attached file.
data <- read.csv("Data/Polymer Study - Field Data.csv")
# Convert categorical variables to factors
data$Species <- as.factor(data$Species)
data$Polymer <- as.factor(data$Polymer)
data$Year <- as.factor(data$Year)
# Add Site and Plot as factors, assuming these columns exist in your data
data$Site <- as.factor(data$Site)
data$Plot <- as.factor(data$Plot)
# Replace 'Dead' with NA in 'Height' and create a 'Dead' indicator
# Ensure 'Height' is numeric
data$Dead <- ifelse(data$Height == "Dead", 1, 0)
data$Height[data$Height == "Dead"] <- NA
data$Height <- as.numeric(data$Height)
# Calculate proportion of dead plants, excluding "0" Year
dead_proportion <- data %>%
filter(Year != "0") %>% # Exclude Year "0" (baseline) for mortality calculation
group_by(Species, Polymer, Year, Site) %>% # Added Site to grouping for more detail
summarise(
Total_Plants = n(),
Dead_Plants = sum(Dead, na.rm = TRUE),
Proportion_Dead = Dead_Plants / Total_Plants,
.groups = "drop"
)
print("Proportion of Dead Plants:")
print(dead_proportion)
# Filter out rows where all plants are dead or alive for logistic regression, exclude 0 month
# This step is crucial for logistic regression to have variance in the dependent variable
data_filtered_mortality <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year, Site) %>% # Grouping by Site to see site-specific effects if any
filter(n_distinct(Dead) > 1) %>% # Ensure there's both 0s and 1s in 'Dead' for the model
ungroup()
logistic_results <- data_filtered_mortality %>%
group_by(Species, Polymer) %>%
do(model = glm(Dead ~ Year, family = binomial, data = .)) %>% # Fitting glm for each group
summarise(
Species = first(Species),
Polymer = first(Polymer),
broom::tidy(model), # Use broom::tidy for clean model output
.groups = "drop"
) %>%
filter(term != "(Intercept)") %>% # Remove intercept terms for clarity
mutate(
Sig = ifelse(p.value < 0.05, "*", ""), # Mark significant p-values
Odds_Ratio = exp(estimate) # Calculate Odds Ratio from log-odds
)
print("\nLogistic Regression Results (Effect of Year on Mortality):")
print(logistic_results)
# Combine data for plotting
plot_data_mortality <- dead_proportion %>%
left_join(logistic_results, by = c("Species" = "Species", "Polymer" = "Polymer"))
# Create the plot for mortality proportion
# Added Site to the aesthetics if you want to differentiate by site in the plot
ggplot(plot_data_mortality, aes(x = interaction(Year, Species), y = Proportion_Dead,
fill = Polymer)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("lightblue", "#FFA07A")) + # Colors by polymer
theme_classic() +
labs(
x = "Year - Species",
y = "Proportion Dead",
title = "Proportion of Dead Plants by Species, Polymer, and Year"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 1) + # Set y-axis limits from 0 to 1 for proportions
geom_text(
aes(label = Sig, y = Proportion_Dead + 0.05), # Position significance star slightly above bar
position = position_dodge(width = 0.9),
vjust = 0
) +
facet_wrap(~ Site) # Facet by Site to see patterns across locations
View(data)
# Load necessary libraries
library(tidyverse)
library(rstatix) # For easy summary statistics and ANOVA/post-hoc tests
library(lme4)    # For fitting linear mixed-effects models
library(lmerTest) # For p-values in lme4 models and for anova() function
library(afex)    # For aov_ez, which is useful for mixed ANOVA designs
library(emmeans) # For post-hoc comparisons
# Load the dataset using content_fetcher (assuming it's accessible as 'Polymer Study - Field Data.csv')
# In a real R environment, you'd use read.csv("Polymer Study - Field Data.csv")
# For this environment, we simulate loading the attached file.
data <- read.csv("Polymer Study - Field Data.csv")
# Convert categorical variables to factors
data$Species <- as.factor(data$Species)
data$Polymer <- as.factor(data$Polymer)
data$Year <- as.factor(data$Year)
# Add Site and Plot as factors, assuming these columns exist in your data
data$Site <- as.factor(data$Site)
data$Plot <- as.factor(data$Plot)
# Replace 'Dead' with NA in 'Height' and create a 'Dead' indicator
# Ensure 'Height' is numeric
data$Dead <- ifelse(data$Height == "Dead", 1, 0)
data$Height[data$Height == "Dead"] <- NA
data$Height <- as.numeric(data$Height)
# Calculate proportion of dead plants, excluding "0" Year
dead_proportion <- data %>%
filter(Year != "0") %>% # Exclude Year "0" (baseline) for mortality calculation as it's typically 0%
group_by(Species, Polymer, Year, Site) %>% # Added Site to grouping for more detail
summarise(
Total_Plants = n(),
Dead_Plants = sum(Dead, na.rm = TRUE),
Proportion_Dead = Dead_Plants / Total_Plants,
.groups = "drop"
)
print("Proportion of Dead Plants:")
print(dead_proportion)
# Filter out rows where all plants are dead or alive for logistic regression, exclude 0 month
# This step is crucial for logistic regression to have variance in the dependent variable
data_filtered_mortality <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year, Site) %>% # Grouping by Site to see site-specific effects if any
filter(n_distinct(Dead) > 1) %>% # Ensure there's both 0s and 1s in 'Dead' for the model
ungroup()
# Logistic Regression to model mortality
logistic_results <- data_filtered_mortality %>%
group_by(Species, Polymer) %>%
do(model = glm(Dead ~ Year, family = binomial, data = .)) %>% # Fitting glm for each group
summarise(
Species = first(Species),
Polymer = first(Polymer),
broom::tidy(model), # Use broom::tidy for clean model output
.groups = "drop"
) %>%
filter(term != "(Intercept)") %>% # Remove intercept terms for clarity
mutate(
Sig = ifelse(p.value < 0.05, "*", ""), # Mark significant p-values
Odds_Ratio = exp(estimate) # Calculate Odds Ratio from log-odds
)
print("\nLogistic Regression Results (Effect of Year on Mortality):")
print(logistic_results)
# Combine data for plotting
plot_data_mortality <- dead_proportion %>%
left_join(logistic_results, by = c("Species" = "Species", "Polymer" = "Polymer"))
# Create the plot for mortality proportion
ggplot(plot_data_mortality, aes(x = interaction(Year, Species), y = Proportion_Dead,
fill = Polymer)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("lightblue", "#FFA07A")) + # Colors by polymer
theme_classic() +
labs(
x = "Year - Species",
y = "Proportion Dead",
title = "Proportion of Dead Plants by Species, Polymer, and Year"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 1) + # Set y-axis limits from 0 to 1 for proportions
geom_text(
aes(label = Sig, y = Proportion_Dead + 0.05), # Position significance star slightly above bar
position = position_dodge(width = 0.9),
vjust = 0
) +
facet_wrap(~ Site) # Facet by Site to see patterns across locations
# We now include all data points, including Year 0, for the height analysis.
# We still filter out NA heights (dead plants).
data_height_all_years <- data %>%
filter(!is.na(Height)) # Exclude rows where Height is NA (dead plants)
print("\n--- Growth Height Analysis (Including Year 0) ---")
# 1. Descriptive Statistics for Height (Including Year 0)
height_summary_all_years <- data_height_all_years %>%
group_by(Species, Polymer, Year, Site) %>%
summarise(
Mean_Height = mean(Height, na.rm = TRUE),
SD_Height = sd(Height, na.rm = TRUE),
N_Plants = n(),
.groups = "drop"
)
print("\nMean and Standard Deviation of Plant Heights (Including Year 0):")
print(height_summary_all_years)
# Ensure that the combination of Site and Plot uniquely identifies a plot
data_height_all_years$Plot_ID <- interaction(data_height_all_years$Site, data_height_all_years$Plot, drop = TRUE)
# Set "0" as the reference level for Year, so comparisons are relative to baseline height.
data_height_all_years$Year <- relevel(data_height_all_years$Year, ref = "0")
tryCatch({
model_height_lmer_all_years <- lmer(Height ~ Polymer * Species * Year + (1|Site) + (1|Plot_ID),
data = data_height_all_years, REML = TRUE)
print("\nLinear Mixed-Effects Model Summary for Height (Including Year 0):")
print(summary(model_height_lmer_all_years))
# Perform ANOVA-like tests on the mixed model to get p-values for fixed effects
print("\nANOVA Table for Fixed Effects (Height Model, Including Year 0):")
print(anova(model_height_lmer_all_years))
# Post-hoc tests for significant interactions or main effects
# The interpretations of emmeans will now be relative to the Year 0 baseline or differences from it.
print("\nPost-hoc tests (example: Polymer effect within Species and Year, including Year 0):")
emmeans_interaction_all_years <- emmeans(model_height_lmer_all_years, ~ Polymer | Species * Year)
print(pairs(emmeans_interaction_all_years, adjust = "bonferroni"))
print("\nPost-hoc tests (example: Year effect within Species and Polymer, showing changes from Year 0):")
emmeans_year_all_years <- emmeans(model_height_lmer_all_years, ~ Year | Species * Polymer)
# Contrast "pairwise" directly compares all levels. To see change from Year 0:
print(pairs(emmeans_year_all_years, adjust = "bonferroni"))
}, error = function(e) {
message("Could not fit mixed-effects model with all years. Error: ", e$message)
message("This might happen if there's insufficient variance within random effects groups or if 'Plot_ID' is not granular enough relative to observations.")
})
# 3. Visualization of Growth Heights (Now includes Year 0)
# Plot mean height over years, faceted by site
ggplot(height_summary_all_years, aes(x = Year, y = Mean_Height, color = Polymer, linetype = Species, group = interaction(Polymer, Species))) +
geom_line(linewidth = 1) +
geom_point(aes(shape = Species), size = 3) +
scale_color_manual(values = c("No" = "darkgreen", "Yes" = "darkorange")) +
theme_minimal() +
labs(
x = "Year",
y = "Mean Height (cm)",
title = "Mean Plant Height Over Time by Polymer, Species, and Site (Including Year 0)",
color = "Polymer Treatment",
linetype = "Species",
shape = "Species"
) +
theme(
legend.position = "bottom",
axis.text.x = element_text(angle = 45, hjust = 1)
) +
facet_wrap(~ Site, scales = "free_y")
# Boxplot to visualize distribution of heights at each measurement point (Now includes Year 0)
ggplot(data_height_all_years, aes(x = Year, y = Height, fill = Polymer)) +
geom_boxplot(position = position_dodge(0.8)) +
scale_fill_manual(values = c("No" = "lightblue", "Yes" = "#FFA07A")) +
facet_grid(Species ~ Site, scales = "free_y") +
theme_classic() +
labs(
x = "Year",
y = "Height (cm)",
title = "Distribution of Plant Heights by Species, Polymer, Year, and Site (Including Year 0)"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print("\nAnalysis complete. Check the generated plots for visual insights.")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra", "rstatix", "emmeans",
"afex", "lmerTest", "lme4")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(tidyverse)
library(rstatix)
library(lme4)
library(lmerTest)
library(afex)
library(emmeans)
# Load the dataset
data <- read.csv("Data/Polymer Study - Field Data.csv")
# Convert categorical variables
data$Species <- as.factor(data$Species)
data$Polymer <- as.factor(data$Polymer)
data$Year <- as.factor(data$Year)
# Replace 'Dead' with NA in 'Height' and create a 'Dead' indicator
data$Dead <- ifelse(data$Height == "Dead", 1, 0)
data$Height[data$Height == "Dead"] <- NA
data$Height <- as.numeric(data$Height)
# Calculate proportion of dead plants, excluding "0" Year
dead_proportion <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year) %>%
summarise(
Total_Plants = n(),
Dead_Plants = sum(Dead, na.rm = TRUE),
Proportion_Dead = Dead_Plants / Total_Plants,
.groups = "drop"
)
print("Proportion of Dead Plants:")
print(dead_proportion)
# Filter out rows where all plants are dead or alive for logistic regression, exclude 0 month
data_filtered <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year) %>%
filter(n_distinct(Dead) > 1) %>%
ungroup()
# Logistic Regression
logistic_results <- data_filtered %>%
group_by(Species, Polymer) %>%
do(model = glm(Dead ~ Year, family = binomial, data = .)) %>%
summarise(
Species = first(Species),
Polymer = first(Polymer),
tidy(model),
.groups = "drop"
) %>%
filter(term != "(Intercept)") %>%
mutate(
Sig = ifelse(p.value < 0.05, "*", ""),
Odds_Ratio = exp(estimate)
)
print("\nLogistic Regression Results:")
print(logistic_results)
# Combine data for plotting
plot_data <- dead_proportion %>%
left_join(logistic_results, by = c("Species" = "Species", "Polymer" = "Polymer"))
# Create the plot
ggplot(plot_data, aes(x = interaction(Year, Species), y = Proportion_Dead,
fill = Polymer)) + # changed x axis and fill
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("lightblue", "#FFA07A")) + # colors by polymer
theme_classic() +
labs(
x = "Year - Species", # changed x axis label
y = "Proportion Dead"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 1) +
geom_text(
aes(label = Sig, y = Proportion_Dead + 0.05),
position = position_dodge(width = 0.9),
vjust = 0
)
# Filter out rows where all plants are dead or alive for logistic regression, exclude 0 month
# This step is crucial for logistic regression to have variance in the dependent variable
data_filtered_mortality <- data %>%
filter(Year != "0") %>%
group_by(Species, Polymer, Year, Site) %>% # Grouping by Site to see site-specific effects if any
filter(n_distinct(Dead) > 1) %>% # Ensure there's both 0s and 1s in 'Dead' for the model
ungroup()
# Logistic Regression to model mortality
logistic_results <- data_filtered_mortality %>%
group_by(Species, Polymer) %>%
do(model = glm(Dead ~ Year, family = binomial, data = .)) %>% # Fitting glm for each group
summarise(
Species = first(Species),
Polymer = first(Polymer),
broom::tidy(model), # Use broom::tidy for clean model output
.groups = "drop"
) %>%
filter(term != "(Intercept)") %>% # Remove intercept terms for clarity
mutate(
Sig = ifelse(p.value < 0.05, "*", ""), # Mark significant p-values
Odds_Ratio = exp(estimate) # Calculate Odds Ratio from log-odds
)
print("\nLogistic Regression Results (Effect of Year on Mortality):")
print(logistic_results)
# Combine data for plotting
plot_data_mortality <- dead_proportion %>%
left_join(logistic_results, by = c("Species" = "Species", "Polymer" = "Polymer"))
# Create the plot for mortality proportion
ggplot(plot_data_mortality, aes(x = interaction(Year, Species), y = Proportion_Dead,
fill = Polymer)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("lightblue", "#FFA07A")) + # Colors by polymer
theme_classic() +
labs(
x = "Year - Species",
y = "Proportion Dead",
title = "Proportion of Dead Plants by Species, Polymer, and Year"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, 1) + # Set y-axis limits from 0 to 1 for proportions
geom_text(
aes(label = Sig, y = Proportion_Dead + 0.05), # Position significance star slightly above bar
position = position_dodge(width = 0.9),
vjust = 0
) +
facet_wrap(~ Site) # Facet by Site to see patterns across locations

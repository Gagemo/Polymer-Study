# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 3)), size=5)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 3)), size=5)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
################################################################################
################################################################################
#########################      Polymer Study      ##############################
######### Greenhouse - Lovegrass - Moisture & Height Data ######################
#########################  University of Florida  ##############################
#########################     Gage LaPierre       ##############################
#########################      2022 - 2025        ##############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library(tidyverse)
library(car)
library(gridExtra)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Plug.Moisture, Sand.Moisture, Height, Leaf.Height, Height.Difference),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Check for normality
shapiro_results <- list(
Plug.Moisture = shapiro.test(data$Plug.Moisture)$p.value,
Sand.Moisture = shapiro.test(data$Sand.Moisture)$p.value,
Height = shapiro.test(na.omit(data$Height))$p.value,
Leaf.Height = shapiro.test(data$Leaf.Height)$p.value,
Height.Difference = shapiro.test(data$Height.Difference)$p.value
)
print(shapiro_results)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library(tidyverse)
library(car)
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridExtra")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library(tidyverse)
library(car)
library(gridExtra)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass Weight.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Plug.Moisture, Sand.Moisture, Height, Leaf.Height, Height.Difference),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass Weight.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Total.Weight, Root.Weight, Shoot.Weight,Lost.Weight,
Lost.Weight.., Root.., Shoot..),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Check for normality
shapiro_results <- list(
Total.Weight = shapiro.test(data$Total.Weight)$p.value,
Root.Weight = shapiro.test(data$Root.Weight)$p.value,
Lost.Weight = shapiro.test(na.omit(data$Lost.Weight))$p.value,
Lost.Weight.. = shapiro.test(data$Lost.Weight..)$p.value,
Root.. = shapiro.test(data$Root..)$p.value,
Shoot.. = shapiro.test(data$Shoot..)$p.value
)
print(shapiro_results)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(x = NULL, y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
################################################################################
################################################################################
#########################      Polymer Study      ##############################
######### Greenhouse - Lovegrass - Moisture & Height Data ######################
#########################  University of Florida  ##############################
#########################     Gage LaPierre       ##############################
#########################      2022 - 2025        ##############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library(tidyverse)
library(car)
library(gridExtra)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Plug.Moisture, Sand.Moisture, Height, Leaf.Height, Height.Difference),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Check for normality
shapiro_results <- list(
Plug.Moisture = shapiro.test(data$Plug.Moisture)$p.value,
Sand.Moisture = shapiro.test(data$Sand.Moisture)$p.value,
Height = shapiro.test(na.omit(data$Height))$p.value,
Leaf.Height = shapiro.test(data$Leaf.Height)$p.value,
Height.Difference = shapiro.test(data$Height.Difference)$p.value
)
print(shapiro_results)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(x = NULL, y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
View(data)
# Convert Labels for Plots
colnames(data)[6]  <- "Plug Moisture"
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Convert Labels for Plots
colnames(data)[6]  <- "Plug moisture"
colnames(data)[7]  <- "Sand moisture"
colnames(data)[8]  <- "Height"
colnames(data)[9]  <- "Leaf height"
colnames(data)[10]  <- "Height difference"
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Plug moisture, Sand moisture, Height, Leaf height, Height difference),
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(`Plug moisture`, `Sand moisture`, `Height`, `Leaf height`, `Height difference`),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Convert Labels for Plots
colnames(data)[6]  <- "Plug moisture"
colnames(data)[7]  <- "Sand moisture"
colnames(data)[8]  <- "Height"
colnames(data)[9]  <- "Leaf height"
colnames(data)[10]  <- "Height difference"
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(`Plug moisture`, `Sand moisture`, `Height`, `Leaf height`, `Height difference`),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Check for normality
shapiro_results <- list(
`Plug moisture` = shapiro.test(data$`Plug moisture`)$p.value,
`Sand moisture` = shapiro.test(data$`Sand moisture`)$p.value,
Height = shapiro.test(na.omit(data$Height))$p.value,
`Leaf height` = shapiro.test(data$`Leaf height`)$p.value,
`Height difference` = shapiro.test(data$`Height difference`)$p.value
)
print(shapiro_results)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
################################################################################
################################################################################
#########################      Polymer Study      ##############################
######### Greenhouse - Lovegrass - Moisture & Height Data ######################
#########################  University of Florida  ##############################
#########################     Gage LaPierre       ##############################
#########################      2022 - 2025        ##############################
################################################################################
################################################################################
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "car", "gridextra")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library(tidyverse)
library(car)
library(gridExtra)
# Load the dataset
data <- read.csv("Data/Polymer Study - Lovegrass - Moisture & Height.csv")
# Convert categorical variables
data$Treatment <- as.factor(data$Treatment)
# Summary statistics
summary_stats <- data %>%
group_by(Treatment) %>%
summarise(across(c(Plug.Moisture, Sand.Moisture, Height, Leaf.Height, Height.Difference),
list(mean = mean, sd = sd, median = median, min = min, max = max), na.rm = TRUE))
print(summary_stats)
# Check for normality
shapiro_results <- list(
Plug.Moisture = shapiro.test(data$Plug.Moisture)$p.value,
Sand.Moisture = shapiro.test(data$Sand.Moisture)$p.value,
Height = shapiro.test(na.omit(data$Height))$p.value,
Leaf.Height = shapiro.test(data$Leaf.Height)$p.value,
Height.Difference = shapiro.test(data$Height.Difference)$p.value
)
print(shapiro_results)
# Determine test based on normality
anova_results <- list()
test_type <- list()
for (metric in names(shapiro_results)) {
if (shapiro_results[[metric]] > 0.05) {
model <- aov(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- summary(model)[[1]][["Pr(>F)"]][1]
test_type[[metric]] <- "ANOVA"
} else {
model <- kruskal.test(as.formula(paste(metric, "~ Treatment")), data = data)
anova_results[[metric]] <- model$p.value
test_type[[metric]] <- "Kruskal-Wallis"
}
}
print(anova_results)
# Function to create boxplots and annotate significance and test type
create_boxplot <- function(metric, p_value, test_used, y_label) {
plot <- ggplot(data, aes(x=Treatment, y=!!sym(metric), fill=Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("lightblue", "#FFA07A")) +
theme_classic() +
labs(x = NULL, y = y_label) +
theme(legend.position = "none") +
coord_cartesian(ylim = c(NA, max(data[[metric]], na.rm=TRUE) * 1.1)) + # Adjust y-axis limits
annotate("text", x=1.5, y=max(data[[metric]], na.rm=TRUE) * 1,
label=paste0(test_used, "\np = ", round(p_value, 2)), size=3)
# Save plot
ggsave(filename = paste0("Figures/boxplot_", metric, ".jpg"), plot = plot, width = 6, height = 4, dpi = 300)
return(plot)
}
# Generate and save boxplots
boxplots <- lapply(names(anova_results), function(metric) {
create_boxplot(metric, anova_results[[metric]], test_type[[metric]], metric)
})
# Print all plots
do.call(grid.arrange, c(boxplots, ncol=2))
